clear all
%% Patterns
x1=[ [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1];[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];[ -1, 1, 1, 1, -1, -1, 1, 1, 1, -1];[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] ];
x2=[ [ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[ -1, -1, -1, 1, 1, 1, 1, -1, -1, -1] ];
x3=[ [ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1];[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1];[ -1, -1, -1, -1, -1, 1, 1, 1, -1, -1];[ -1, -1, -1, -1, -1, 1, 1, 1, -1, -1];[ -1, -1, -1, -1, -1, 1, 1, 1, -1, -1];[ -1, -1, -1, -1, -1, 1, 1, 1, -1, -1];[ -1, -1, -1, -1, -1, 1, 1, 1, -1, -1];[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1];[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1];[ 1, 1, 1, -1, -1, -1, -1, -1, -1, -1];[ 1, 1, 1, -1, -1, -1, -1, -1, -1, -1];[ 1, 1, 1, -1, -1, -1, -1, -1, -1, -1];[ 1, 1, 1, -1, -1, -1, -1, -1, -1, -1];[ 1, 1, 1, -1, -1, -1, -1, -1, -1, -1];[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1];[ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1] ];
x4=[ [ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1];[ -1, -1, 1, 1, 1, 1, 1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1];[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1];[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1];[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, 1, 1, 1, -1];[ -1, -1, 1, 1, 1, 1, 1, 1, 1, -1];[ -1, -1, 1, 1, 1, 1, 1, 1, -1, -1] ];
x5=[ [ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1];[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1];[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1];[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1];[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1];[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1];[ -1, 1, 1, -1, -1, -1, -1, 1, 1, -1];[ -1, 1, 1, 1, 1, 1, 1, 1, 1, -1];[ -1, 1, 1, 1, 1, 1, 1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1];[ -1, -1, -1, -1, -1, -1, -1, 1, 1, -1] ];
p=5;
patterns = zeros(numel(x1),p);
for ii=1:p
    patterns(:,ii) = reshape(transpose(eval(sprintf('x%d',ii))),numel(x1),1);
end

%% Check if correct
figure(1)
for ii=1:5
    subplot(1,5,ii)
    imshow(eval(sprintf('-x%d',ii)),'InitialMagnification','fit')
    grid on
end
clear x1 x2 x3 x4
%%
feed1 = [[1, 1, 1, -1, -1, -1, -1, 1, 1, 1];[1, 1, 1, -1, -1, -1, -1, 1, 1, 1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1];[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1]];
feed2 = [[-1, -1, -1, -1, -1, -1, -1, -1, 1, 1];[-1, -1, -1, -1, -1, -1, -1, -1, 1, 1];[1, 1, 1, 1, 1, -1, -1, -1, 1, 1];[1, 1, 1, 1, 1, -1, -1, -1, 1, 1];[1, 1, 1, 1, 1, -1, -1, -1, 1, 1];[1, 1, 1, 1, 1, -1, -1, -1, 1, 1];[1, 1, 1, 1, 1, -1, -1, -1, 1, 1];[-1, -1, -1, -1, -1, -1, -1, -1, 1, 1];[-1, -1, -1, -1, -1, 1, 1, 1, -1, -1];[1, 1, 1, -1, -1, -1, -1, -1, -1, -1];[1, 1, 1, -1, -1, -1, -1, -1, -1, -1];[1, 1, 1, -1, -1, -1, -1, -1, -1, -1];[1, 1, 1, -1, -1, -1, -1, -1, -1, -1];[1, 1, 1, -1, -1, -1, -1, -1, -1, -1];[1, 1, 1, 1, 1, 1, 1, 1, -1, -1];[1, 1, 1, 1, 1, 1, 1, 1, -1, -1]];
feed3 = [[1, -1, -1, 1, -1, -1, -1, -1, 1, 1];[-1, -1, -1, -1, -1, 1, 1, 1, -1, -1];[-1, -1, 1, -1, -1, -1, -1, -1, -1, -1];[1, 1, -1, -1, 1, -1, -1, -1, -1, 1];[1, -1, -1, 1, -1, 1, 1, -1, -1, -1];[-1, 1, -1, -1, 1, -1, -1, -1, -1, -1];[1, 1, -1, -1, -1, -1, -1, 1, -1, -1];[1, -1, 1, -1, 1, 1, 1, 1, -1, 1];[-1, -1, -1, -1, 1, -1, 1, -1, -1, 1];[1, -1, 1, -1, -1, -1, 1, -1, -1, -1];[-1, 1, -1, -1, -1, -1, -1, 1, -1, -1];[-1, -1, -1, 1, 1, 1, -1, -1, -1, 1];[-1, 1, -1, 1, -1, 1, 1, -1, -1, 1];[-1, -1, -1, 1, 1, -1, -1, 1, 1, 1];[1, 1, -1, 1, 1, -1, -1, -1, 1, 1];[-1, 1, 1, -1, -1, -1, -1, -1, 1, -1]];
figure(2)
% Show input feeds
for ii=1:3
    subplot(1,3,ii)
    imshow(eval(sprintf('-feed%d',ii)),'InitialMagnification','fit')
end
%% 1A

% Store patterns using Hebb's rule (w_ii=0)
W = hebbsRule(patterns,true);
N=numel(feed1);
for ii=3:-1:1% Iterate backwards to avoid need for preallocation of 'output'
    S_old=reshape(transpose(eval(sprintf('feed%d',ii))),N,1);
    S_new = S_old;
    convTrue=false;
    disp('--------------------------------')
    counter =0;
    while(~convTrue)
    counter=counter+1;
    disp(counter)
    S_old=S_new;
        for jj=1:N
            S_new(jj)=sign(W(jj,:)*S_new);
            if S_new(jj)==0
                S_new(jj)=1;
            end
        end
        convTrue=isequal(S_new,S_old);
    end
    disp('--------------------------------')    
    output(:,ii)=S_new; 
end

[row,col]=size(feed1);
figure(64)
for ii=1:3
    subplot(1,3,ii)
    image=reshape(output(:,ii),col,row)';
    imshow(-image,'InitialMagnification','fit')
end